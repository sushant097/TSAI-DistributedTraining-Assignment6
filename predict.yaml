
import argparse
import urllib
from PIL import Image
import timm
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform
import torch
import json


# Training settings
parser = argparse.ArgumentParser(description='Evaluate with Timm Models')
parser.add_argument('--model', type=str,
                    help='Input model name to create and inference (default:None)')
parser.add_argument('--image', type=str,
                    help='input IMAGE URL (default: None)')

args = parser.parse_args()

model = timm.create_model(args.model, pretrained=True)
model.eval()

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url = args.image
filename = url.split('/')[-1]

urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension




with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
# prints: torch.Size([1000])


# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top_prob, top_catid = torch.topk(probabilities, 1)

# print(f"Predicted: {categories[top_catid]}, Confidence: {top_prob}")

predictions = {
    "predicted": categories[top_catid],
    "confidence": str(round(top_prob.numpy()[0], 2))
}

output = json.dumps(predictions)
print(output)
# print(json.loads(output)) # seems correct
